package vuln

import (
	"fmt"
	"html/template"
	"os"
	"regexp"
	"time"
)

// snippet returns the first N characters of s (safe for unicode) with ellipsis if trimmed.
func snippet(s string, n int) string {
	if len(s) <= n {
		return s
	}
	return s[:n] + "…"
}

// findRegexSnippet returns up to maxLen chars around the first match for re in s.
func findRegexSnippet(re *regexp.Regexp, s string, maxLen int) string {
	loc := re.FindStringIndex(s)
	if loc == nil {
		// fallback: return start
		return snippet(s, maxLen)
	}
	start := loc[0] - maxLen/2
	if start < 0 {
		start = 0
	}
	end := start + maxLen
	if end > len(s) {
		end = len(s)
	}
	sn := s[start:end]
	if start > 0 {
		sn = "…" + sn
	}
	if end < len(s) {
		sn = sn + "…"
	}
	return sn
}

// WriteReport writes an HTML report containing all recorded findings.
// Call this after running ScanURL(s). Returns an error if writing fails.
func WriteReport() error {
	// Build a safe filename with timestamp
	now := time.Now().UTC()
	filename := fmt.Sprintf("vuln_report_%s.html", now.Format("20060102_150405"))
	f, err := os.Create(filename)
	if err != nil {
		return fmt.Errorf("failed to create report file: %w", err)
	}
	defer f.Close()

	// Prepare report template
	const tpl = `<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Vulnerability Scan Report - {{ .GeneratedAt }}</title>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<style>
body{font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; margin:24px; color:#0b1226}
h1,h2{color:#0b1226}
.header {display:flex;align-items:center;justify-content:space-between}
.card{border:1px solid #e6e9ef;border-radius:10px;padding:14px;margin:12px 0;box-shadow:0 2px 6px rgba(11,18,38,0.04)}
.small{font-size:0.9rem;color:#444}
.code{background:#0f1724;color:#fff;padding:10px;border-radius:6px;overflow:auto;font-family:monospace;font-size:0.9rem}
.evidence{white-space:pre-wrap;background:#f7f9fc;padding:10px;border-radius:6px;font-family:monospace}
.bad{color:#b00020}
.good{color:#0b7a4d}
.footer{margin-top:20px;color:#666;font-size:0.9rem}
a { color: #0b5cff; text-decoration: none; }
</style>
</head>
<body>
<div class="header">
  <div>
    <h1>Vulnerability Scan Report</h1>
    <div class="small">Generated: {{ .GeneratedAt }}</div>
  </div>
  <div class="small">Findings: <strong>{{ len .Findings }}</strong></div>
</div>

{{ if not .Findings }}
<div class="card">
  <h2>No findings</h2>
  <p class="small">No obvious vulnerabilities were recorded during the scan.</p>
</div>
{{ else }}
{{ range $i, $f := .Findings }}
<div class="card">
  <h2>{{ add $i 1 }}. {{ $f.Name }}</h2>
  <div class="small">Time: {{ $f.Timestamp }}</div>
  <p><strong>Target URL:</strong> <a href="{{ $f.TestURL }}">{{ $f.TestURL }}</a></p>
  <p><strong>Method:</strong> {{ $f.Method }}  &nbsp; <strong>Param:</strong> {{ $f.Param }}  &nbsp; <strong>Payload:</strong> <span class="code">{{ $f.Payload }}</span></p>
  <p><strong>HTTP Status:</strong> {{ $f.StatusCode }} {{ if $f.Location }} &nbsp; <strong>Location:</strong> <code>{{ $f.Location }}</code> {{ end }}</p>

  <h3>Evidence</h3>
  {{ if $f.Evidence }}
  <div class="evidence">{{ $f.Evidence }}</div>
  {{ else }}
  <div class="small">No direct snippet captured.</div>
  {{ end }}

  <h3>Response body (snippet)</h3>
  <div class="evidence">{{ $f.BodySnippet }}</div>

  <h3>Response headers (snippet)</h3>
  <div class="evidence">{{ $f.HeaderSnippet }}</div>

  <h3>Notes</h3>
  <div class="small">{{ if $f.Notes }}{{ $f.Notes }}{{ else }}No notes. Add remediation guidance here.{{ end }}</div>
</div>
{{ end }}
{{ end }}

<div class="footer">
  <p>Tip: Keep this report private. Use it to track remediation and reproduce tests. This report was generated by the vuln scanner.</p>
</div>
</body>
</html>`

	// Prepare template with small helper
	t := template.New("report").Funcs(template.FuncMap{
		"add": func(a, b int) int { return a + b },
	})
	t, err = t.Parse(tpl)
	if err != nil {
		return fmt.Errorf("failed to parse html template: %w", err)
	}

	data := struct {
		GeneratedAt string
		Findings    []Finding
	}{
		GeneratedAt: now.Format(time.RFC1123),
		Findings:    findings,
	}

	if err := t.Execute(f, data); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	fmt.Printf("[+] Report written to: %s\n", filename)
	return nil
}
